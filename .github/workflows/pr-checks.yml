name: PR checks

on: # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "*.md"
      - "DCO"
      - "LICENSE"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  GO111MODULE: "on"
  GO_VERSION: "^1.21"
  # quote this, since yaml will otherwise treat this as a float

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-20.04

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Lint Go
        if: success() || failure()
        run: make lint-go
        env:
          GO_LINT_CONCURRENCY: 2
          GO_LINT_OUTPUT: github-actions

  unit:
    name: Unit Tests
    runs-on: ubuntu-20.04

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Unit Tests with Code Coverage
        run: |
          make test

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  single-commit:
    name: Single commit PR
    runs-on: ubuntu-20.04
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify number of commits in the PR is 1
        run: |
          COMMIT_COUNT="$(git log --oneline ${{github.event.pull_request.base.sha}}..${{github.event.pull_request.head.sha}} | wc -l)"
          if ! [ $COMMIT_COUNT -eq 1 ]; then
            echo "Number of commits in the PR ($COMMIT_COUNT) must not be greater than one."
            echo "Please squash all PR commits into a single one (https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#_squashing)"
            exit 1
          fi